#!/bin/sh

# This file was adapted from:
# https://github.com/edgarcosta/controlledreduction/blob/master/configure
# See LICENSE for license details.

#VERSION
HDME_MAJOR=0
HDME_MINOR=2
HDME_PATCH=0

SHARED=1
STATIC=0

PREFIX="/usr/local"
ARB_DIR="" # "/usr/local"
FLINT_DIR="" # "/usr/local"
MPFR_DIR="" # "/usr/local"
GMP_DIR="" # "/usr/local"


#set CC to gcc if CC is not set
if [  -z ${CC+word} ]; then
    CC="gcc"
fi;

#set AR to ar if AR is not set
if [  -z ${AR+word} ]; then
    AR="ar"
fi;

LIBS="m"
VERBOSE=1 #From 0 to 3
GDB=1
OPENMP=1
PTHREAD=1

usage()
{
    echo "Usage: ./configure <options> <args>"
    echo "  where <options> may be"
    echo "      -h or --help display usage information"
    echo "      --enable-gdb        Use GDB (default)"
    echo "      --disable-gdb       Do not use GDB"
    echo "      --enable-openmp     Use openmp (default)"
    echo "      --disable-openmp    Do not use openmp"
    echo "      --enable-pthread    Use pthread (default) for FLINT"
    echo "      --disable-pthread   Do not use pthread"
    echo "  where <args> may be:"

    if [ ! -z ${PREFIX+word} ]; then
        echo "     --prefix=<path>      Specify path to installation location (default: $PREFIX"
    fi

    if [ ! -z ${ARB_DIR+word} ]; then
        echo "     --with-arb=<path>   Specify location of ARB (default: $ARB_DIR)"
    fi

    if [ ! -z ${FLINT_DIR+word} ]; then
        echo "     --with-flint=<path>   Specify location of FLINT (default: $FLINT_DIR)"
    fi

    if [ ! -z ${MPFR_DIR+word} ]; then
        echo "     --with-mpfr=<path>   Specify location of MPFR (default: $MPFR_DIR)"
    fi

    if [ ! -z ${GMP_DIR+word} ]; then
        echo "     --with-gmp=<path>    Specify location of GMP (default: $GMP_DIR)"
    fi

    if [ -n "$CC" ]; then
        echo "     CC=<name>            Use the C compiler with the given name (default: $CC)"
        echo "     CFLAGS=<flags>       Pass the extra given flags to the compiler"
    fi
}


absolute_path(){
   dirlist="$1"
   retval=""
   for dir in $dirlist; do
      case $dir in
        /*) dir=$dir;;
        *) dir=$PWD/$dir;;
      esac
      retval=$retval" "$dir
   done
   echo $retval
}


while [ "$1" != "" ]; do
    PARAM=`echo $1 | sed 's/=.*//'`
    VALUE=`echo $1 | sed 's/[^=]*//; s/=//'`
    case "$PARAM" in
        -h|--help)
            usage
            exit 0
            ;;
        --with-arb)
            if [ ! -z ${ARB_DIR+word} ]; then
                ARB_DIR=$(absolute_path "$VALUE")
	    fi
	    ;;
        --with-flint)
            if [ ! -z ${FLINT_DIR+word} ]; then
                FLINT_DIR=$(absolute_path "$VALUE")
            fi
            ;;
        --with-mpfr)
            if [ ! -z ${MPFR_DIR+word} ]; then
                MPFR_DIR=$(absolute_path "$VALUE")
            fi
            ;;
        --with-gmp)
            if [ ! -z ${GMP_DIR+word} ]; then
                GMP_DIR=$(absolute_path "$VALUE")
            fi
            ;;
        --prefix)
            if [ ! -z ${PREFIX+word} ]; then
                PREFIX=$VALUE
            fi
            ;;
        --enable-gdb)
            GDB=1
            ;;
        --disable-gdb)
            GDB=0
            ;;
        --enable-openmp)
            OPENMP=1
            ;;
        --disable-openmp)
            OPENMP=0
            ;;
        --enable-pthread)
         PTHREAD=1
         ;;
      --disable-pthread)
         PTHREAD=0
         ;;
        CC)
            CC="$VALUE"
            ;;
        CFLAGS)
            CFLAGS="$VALUE"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

if [ -n "${ARB_DIR}" ]; then
    if [ -d "${ARB_DIR}/lib" ]; then
       ARB_LIB_DIR="${ARB_DIR}/lib"
       ARB_INC_DIR="${ARB_DIR}/include"
    elif [ -d "${ARB_DIR}/lib64" ]; then
       ARB_LIB_DIR="${ARB_DIR}/lib64"
       ARB_INC_DIR="${ARB_DIR}/include"
    elif [ -d "${ARB_DIR}/.libs" ]; then
       ARB_LIB_DIR="${ARB_DIR}/.libs"
       ARB_INC_DIR="${ARB_DIR}"
    else
       echo "Invalid ARB directory"
       exit 1
    fi
    LIB_DIRS="${LIB_DIRS} ${ARB_LIB_DIR}"
    INC_DIRS="${INC_DIRS} ${ARB_INC_DIR}"
fi;

if [ ! -z ${ARB_DIR+word} ]; then
    LIBS="${LIBS} arb"
fi;

if [ -n "${FLINT_DIR}" ]; then
    if [ -d "${FLINT_DIR}/lib" ]; then
       FLINT_LIB_DIR="${FLINT_DIR}/lib"
       FLINT_INC_DIR="${FLINT_DIR}/include"
    elif [ -d "${FLINT_DIR}/lib64" ]; then
       FLINT_LIB_DIR="${FLINT_DIR}/lib64"
       FLINT_INC_DIR="${FLINT_DIR}/include"
    elif [ -d "${FLINT_DIR}/.libs" ]; then
       FLINT_LIB_DIR="${FLINT_DIR}/.libs"
       FLINT_INC_DIR="${FLINT_DIR}"
    else
       echo "Invalid FLINT directory"
       exit 1
    fi
    LIB_DIRS="${LIB_DIRS} ${FLINT_LIB_DIR}"
    INC_DIRS="${INC_DIRS} ${FLINT_INC_DIR}"
fi;
if [ ! -z ${FLINT_DIR+word} ]; then
    LIBS="${LIBS} flint"
fi;

if [ -n "${MPFR_DIR}" ]; then
    if [ -d "${MPFR_DIR}/lib" ]; then
       MPFR_LIB_DIR="${MPFR_DIR}/lib"
       MPFR_INC_DIR="${MPFR_DIR}/include"
    elif [ -d "${MPFR_DIR}/lib64" ]; then
       MPFR_LIB_DIR="${MPFR_DIR}/lib64"
       MPFR_INC_DIR="${MPFR_DIR}/include"
    elif [ -d "${MPFR_DIR}/.libs" ]; then
       MPFR_LIB_DIR="${MPFR_DIR}/.libs"
       MPFR_INC_DIR="${MPFR_DIR}"
    elif [ -d "${MPFR_DIR}/src/.libs" ]; then
       MPFR_LIB_DIR="${MPFR_DIR}/src/.libs"
       MPFR_INC_DIR="${MPFR_DIR}/src"
    else
       echo "Invalid MPFR directory"
       exit 1
    fi
    LIB_DIRS="${LIB_DIRS} ${MPFR_LIB_DIR}"
    INC_DIRS="${INC_DIRS} ${MPFR_INC_DIR}"
fi;
if [ ! -z ${MPFR_DIR+word} ]; then
    LIBS="${LIBS} mpfr"
fi;

if [ -n "${GMP_DIR}" ]; then
    if [ -d "${GMP_DIR}/lib" ]; then
       GMP_LIB_DIR="${GMP_DIR}/lib"
       GMP_INC_DIR="${GMP_DIR}/include"
    elif [ -d "${GMP_DIR}/lib64" ]; then
       GMP_LIB_DIR="${GMP_DIR}/lib64"
       GMP_INC_DIR="${GMP_DIR}/include"
    elif [ -d "${GMP_DIR}/.libs" ]; then
       GMP_LIB_DIR="${GMP_DIR}/.libs"
       GMP_INC_DIR="${GMP_DIR}"
    else
       echo "Invalid GMP directory"
       exit 1
    fi
    LIB_DIRS="${LIB_DIRS} ${GMP_LIB_DIR}"
    INC_DIRS="${INC_DIRS} ${GMP_INC_DIR}"
fi;
if [ ! -z ${GMP_DIR+word} ]; then
    LIBS="${LIBS} gmp"
fi;


# include paths

INCS="-I'\$(CURDIR)'"
for INC_DIR in ${INC_DIRS}; do
   INCS="${INCS} -isystem${INC_DIR}"
done

# library paths

LLIBS="-L'\$(CURDIR)'"
for LIB_DIR in ${LIB_DIRS} ${EXTRA_LIB_DIRS}; do
   LLIBS="${LLIBS} -L${LIB_DIR}"
done

lLIBS="";
# library params
for LIB in ${LIBS}; do
   lLIBS="-l${LIB} ${lLIBS}"
done
LIBS="$LLIBS $lLIBS"



KERNEL=`uname`
ARCH=`uname -m`
OS=`uname -s`

if [ $OS = "Linux" ]; then
    LIBS="${LIBS} -lrt -lpthread"
fi

#defaults for CFLAGS
FLAGS="-pedantic -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare -O2"
if [ "$GDB" = "1" ]; then
    FLAGS="${FLAGS} -g";
fi

if [ "$OPENMP" = "1" ]; then
  if [ $OS = "Darwin" ]; then
    FLAGS="${FLAGS} -Xpreprocessor"
    LIBS="${LIBS} -lomp"
  fi
  FLAGS="${FLAGS} -fopenmp";
fi


if [ "$PTHREAD" = "1" ]; then
    LIBS="${LIBS} -lpthread"
fi

if [ "$VERBOSE" = "0" ]; then
    FLAGS="${FLAGS} -DMODEQ_VERBOSE=0 -DHECKE_VERBOSE=0 -DPOL_VERBOSE=0";
elif [ "$VERBOSE" = "1" ]; then
    FLAGS="${FLAGS} -DMODEQ_VERBOSE=1 -DHECKE_VERBOSE=1";
elif [ "$VERBOSE" = "2" ]; then
    FLAGS="${FLAGS} -DMODEQ_VERBOSE=1 -DTHOMAE_VERBOSE=1 -DHILBERT_LLL_VERBOSE=1";
elif [ "$VERBOSE" = "3" ]; then
    FLAGS="${FLAGS} -DMODEQ_VERBOSE=1 -DTHOMAE_VERBOSE=1 -DHILBERT_LLL_VERBOSE=1 -DTHETA_VERBOSE=1";
fi

if [ -z "$CFLAGS" ]; then
    CFLAGS="${FLAGS} -std=c99"
fi

if [ -z "$ARFLAGS" ]; then
    ARFLAGS="-rcs"
fi

#PIC flag

if [ -z "$PIC_FLAG" ]; then
   case "$OS" in
      CYGWIN* | MINGW*)
         ;;
      *)
         PIC_FLAG="-fPIC";;
   esac
fi

#name for the HDME_LIB
HDME_LIB_SOLIB=0
if [ -z "$HDME_LIB" ]; then
   case "$OS" in
      Darwin)
         HDME_LIBNAME="libhdme.dylib"
	 HDME_LIB="libhdme-$HDME_MAJOR.$HDME_MINOR.$HDME_PATCH.dylib"
         EXTRA_SHARED_FLAGS="-install_name $PREFIX/lib/$HDME_LIB -compatibility_version $HDME_MAJOR.$HDME_MINOR -current_version $HDME_MAJOR.$HDME_MINOR.$HDME_PATCH";;
      CYGWIN* | MINGW*)
         HDME_LIBNAME="libhdme.dll"
	 HDME_LIB="libhdme-$HDME_MAJOR.dll"
	 EXTRA_SHARED_FLAGS="-static-libgcc -shared -Wl,--export-all-symbols -Wl,-soname,libhdme-$HDME_MAJOR.dll.$HDME_MINOR.$HDME_PATCH";;
      *)
         HDME_LIBNAME="libhdme.so"
	 HDME_LIB="libhdme.so.$HDME_MAJOR.$HDME_MINOR.$HDME_PATCH"
	 EXTRA_SHARED_FLAGS="-Wl,-rpath,-soname,libhdme.so.$HDME_MAJOR"
	 HDME_SOLIB=1;;
   esac
fi

# sometimes LDCONFIG is not to be found in the path. Look at some common places.
case "$OS" in
    MINGW*|CYGWIN*|Darwin)
	LDCONFIG="true";;
    *)
	if [ -z "$LDCONFIG" ]; then
	    LDCONFIG="true"
	    if [ "$HDME_SOLIB" = "1" ]; then
		if command -v ldconfig > /dev/null; then
		    LDCONFIG="ldconfig"
		elif [ -x /sbin/ldconfig ]; then
		    LDCONFIG="/sbin/ldconfig"
		fi
	    fi
	fi;;
esac

#extension for executables

if [ -z "$EXEEXT" ]; then
   case "$OS" in
      CYGWIN* | MINGW*)
         EXEEXT=".exe";;
      *)
         EXEEXT="";;
   esac
fi


echo "# This file is generated by ./configure -- do not edit!" > Makefile
echo "" >> Makefile
echo "SHELL=/bin/sh" >> Makefile
echo "" >> Makefile
echo "" >> Makefile
echo "HDME_STATIC=$STATIC" >> Makefile
echo "HDME_SHARED=$SHARED" >> Makefile
echo "HDME_LIB=$HDME_LIB" >> Makefile
echo "HDME_LIBNAME=$HDME_LIBNAME" >> Makefile
echo "HDME_MAJOR=$HDME_MAJOR" >> Makefile
echo "HDME_SOLIB=$HDME_SOLIB" >> Makefile
echo "PREFIX=$PREFIX" >> Makefile
echo "OS=$OS" >> Makefile
echo "" >> Makefile
echo "" >> Makefile
echo "INCS=$INCS" >> Makefile
echo "LIBS=$LIBS" >> Makefile
echo "" >> Makefile
echo "CC=$CC" >> Makefile
echo "AR=$AR" >> Makefile
echo "ARFLAGS=$ARFLAGS" >> Makefile
echo "LDCONFIG=$LDCONFIG" >> Makefile
echo "" >> Makefile
echo "" >> Makefile
echo "CFLAGS=$CFLAGS" >> Makefile
echo "PIC_FLAG=$PIC_FLAG" >> Makefile  
echo "" >> Makefile
echo "" >> Makefile
echo "EXEEXT=$EXEEXT" >> Makefile
echo "" >> Makefile
echo "" >> Makefile


cat Makefile.in >> Makefile

echo "hdme was successfully configured."
